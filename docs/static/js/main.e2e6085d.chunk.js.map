{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","board","defaultStartPoint","Math","floor","random","defaultEndPoint","useState","setResponse","startPoint","endPoint","boardHeight","boardWidth","wallsList","algorithm","settings","setSettings","useEffect","document","getElementById","join","style","backgroundColor","handleGridClick","e","console","log","target","id","fetchData","a","fetch","method","headers","body","JSON","stringify","response","json","jsonResponse","map","el","drawLine","twojs","c1","c2","line","makeLine","linewidth","stroke","update","drawHandler","Two","height","width","appendTo","forEach","i","length","Array","fill","generatedCoordinate","className","onClick","key","onChange","value","label","algo","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2e6085d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Two from \"two.js\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const board = [30, 30];\r\n  const defaultStartPoint = [Math.floor(Math.random() * board[0]), Math.floor(Math.random() * board[1])];\r\n  const defaultEndPoint = [Math.floor(Math.random() * board[0]), Math.floor(Math.random() * board[1])];\r\n  const [response, setResponse] = useState([]);\r\n  const [startPoint, setStartPoint] = useState(defaultStartPoint);\r\n  const [endPoint, setEndPoint] = useState(defaultEndPoint);\r\n  const [settings, setSettings] = useState({\r\n    boardHeight: \"30\",\r\n    boardWidth: \"30\",\r\n    wallsList: [\r\n      [2, 2],\r\n      [7, 0],\r\n    ],\r\n    startPoint,\r\n    endPoint,\r\n    algorithm: \"a\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.getElementById(startPoint?.join(\"-\")).style.backgroundColor = \"green\";\r\n    document.getElementById(endPoint?.join(\"-\")).style.backgroundColor = \"red\";\r\n  });\r\n\r\n  const handleGridClick = (e) => {\r\n    console.log(e.target.id);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const response = await fetch(\"https://jagadeeshram-mars-rover.herokuapp.com/getPath\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(settings),\r\n    });\r\n\r\n    const jsonResponse = await response.json();\r\n    return jsonResponse[1].map((el) => [el[0] * 30, el[1] * 30]);\r\n  };\r\n\r\n  const drawLine = (twojs, c1, c2) => {\r\n    const line = twojs.makeLine(...c1, ...c2);\r\n    line.linewidth = 6;\r\n    line.stroke = \"rgba(255, 0, 0, 0.5)\";\r\n    twojs.update();\r\n  };\r\n\r\n  const drawHandler = async () => {\r\n    const response = await fetchData();\r\n    setResponse(response);\r\n\r\n    const el = document.getElementById(\"board\");\r\n    const twojs = new Two({\r\n      height: board[0] * 30,\r\n      width: board[1] * 30,\r\n    });\r\n    twojs.appendTo(el);\r\n\r\n    response.forEach((el, i) => {\r\n      if (i < response.length - 1) drawLine(twojs, el, response[i + 1]);\r\n    });\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    setSettings({ ...settings, algorithm: e.target.value });\r\n  };\r\n\r\n  const reload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const algos = [\r\n    {\r\n      value: \"bfs\",\r\n      label: \"Breadth First Search\",\r\n    },\r\n    {\r\n      value: \"d\",\r\n      label: \"Dijkstra's Algorithm\",\r\n    },\r\n    {\r\n      value: \"a\",\r\n      label: \"A* Algorithm\",\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <h1>Jagadeeshram Mars Rover</h1>\r\n      <div id=\"board\" style={{ height: board[0] * 30, width: board[1] * 30, backgroundColor: \"\" }}>\r\n        {[...Array(board[0] * board[1]).fill(\"\")].map((el, i) => {\r\n          const x = i % 30;\r\n          const y = Math.floor((i + 1) / 30) === 30 ? 29 : Math.floor((i + 1) / 30);\r\n          const generatedCoordinate = x + \"-\" + y;\r\n          return (\r\n            <div id={generatedCoordinate} className=\"grid\" onClick={handleGridClick} key={generatedCoordinate}></div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div id=\"toolbar\">\r\n        <h3>Select Algorithm</h3>\r\n        <select onChange={handleSelectChange}>\r\n          {algos.map((algo) => (\r\n            <option key={algo.value} value={algo.value}>\r\n              {algo.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button onClick={reload}>Randomize Start & End Points</button>\r\n        <button onClick={drawHandler}>Draw Path</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}